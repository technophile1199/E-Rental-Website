{"version":3,"sources":["../src/ngx-siema/siema.service.ts"],"names":[],"mappings":"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","file":"siema.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport 'rxjs/add/operator/publish';\n\nconst next$ = new ReplaySubject(1);\nconst prev$ = new ReplaySubject(1);\nconst goTo$ = new ReplaySubject(1);\nconst remove$ = new ReplaySubject(1);\nconst insert$ = new ReplaySubject(1);\nconst prepend$ = new ReplaySubject(1);\nconst append$ = new ReplaySubject(1);\nconst destroy$ = new ReplaySubject(1);\nconst currentSlide$ = new ReplaySubject(1);\n\n\nexport class NgxSiemaService {\n\n  next(numbers: number = 1, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    next$.next({ selector, numbers, listener });\n    return listener.asObservable();\n  }\n\n  prev(numbers: number = 1, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    prev$.next({ selector, numbers, listener });\n    return listener.asObservable();\n  }\n\n  goTo(index: number, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    goTo$.next({ selector, index, listener });\n    return listener.asObservable();\n  }\n\n  remove(index: number, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    remove$.next({ selector, index, listener });\n    return listener.asObservable();\n  }\n\n  insert(item: any, index: number, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    insert$.next({ selector, item, index, listener });\n    return listener.asObservable();\n  }\n\n  prepend(item: any, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    prepend$.next({ selector, item, listener });\n    return listener.asObservable();\n  }\n\n  append(item: any, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    append$.next({ selector, item, listener });\n    return listener.asObservable();\n  }\n\n  destroy(restoreMarkup: boolean = false, selector?: string): Observable<{ selector: string }> {\n    const listener = new BehaviorSubject<{ selector: string }>(null);\n    destroy$.next({ selector, listener });\n    return listener.asObservable();\n  }\n\n  currentSlide(selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    currentSlide$.next({ selector, listener });\n    return listener.asObservable();\n  }\n\n  onNext(): Observable<{ selector: string, numbers: number }> {\n    return next$.publish().refCount();\n  }\n\n  onPrev(): Observable<{ selector: string, numbers: number }> {\n    return prev$.publish().refCount();\n  }\n\n  onGoTo(): Observable<{ selector: string, index: number }> {\n    return goTo$.publish().refCount();\n  }\n\n  onRemove(): Observable<{ selector: string, index: number }> {\n    return remove$.publish().refCount();\n  }\n\n  onInsert(): Observable<{ selector: string, item: any, index: number }> {\n    return insert$.publish().refCount();\n  }\n\n  onPrepend(): Observable<{ selector: string, item: any }> {\n    return prepend$.publish().refCount();\n  }\n\n  onAppend(): Observable<{ selector: string, item: any }> {\n    return append$.publish().refCount();\n  }\n\n  onDestroy(): Observable<{ selector: string }> {\n    return destroy$.publish().refCount();\n  }\n\n  onCurrentSlide(): Observable<{ selector: string }> {\n    return currentSlide$.publish().refCount();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}